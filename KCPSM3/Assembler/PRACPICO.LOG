KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
10Jun2024-21:45:35

 Addr Code

 000                       ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                       ; one second intervals.
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Port definitions
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ;
 000                       CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                       CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
 000                       CONSTANT LED0, 20
 000                       ;**************************************************************************************
 000                       ; Special Register usage
 000                       ;**************************************************************************************
 000                       ;
 000                       ; No registers are given special names in this program.
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Scratch Pad Memory Locations
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                       CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                       CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                       CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                       ;
 000                       CONSTANT Count, 04
 000                       CONSTANT left_sum, 05
 000                       CONSTANT right_sum, 06
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Useful data constants
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                       ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                       ; calculation highly predictable. The '6' in the following equation even allows for
 000                       ; 'CALL delay_1us' instruction in the initiating code.
 000                       ;
 000                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                       ;
 000                       ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                       ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                       ; become lower than intended. Interrupts may effect the timing of software based
 000                       ; delays.
 000                       ;
 000                       CONSTANT delay_1us_constant, 0B
 000                       ;
 000                       ;
 000                       ;
 000                       ; ASCII table
 000                       ;
 000                       CONSTANT character_a, 61
 000                       CONSTANT character_b, 62
 000                       CONSTANT character_c, 63
 000                       CONSTANT character_d, 64
 000                       CONSTANT character_e, 65
 000                       CONSTANT character_f, 66
 000                       CONSTANT character_g, 67
 000                       CONSTANT character_h, 68
 000                       CONSTANT character_i, 69
 000                       CONSTANT character_j, 6A
 000                       CONSTANT character_k, 6B
 000                       CONSTANT character_l, 6C
 000                       CONSTANT character_m, 6D
 000                       CONSTANT character_n, 6E
 000                       CONSTANT character_o, 6F
 000                       CONSTANT character_p, 70
 000                       CONSTANT character_q, 71
 000                       CONSTANT character_r, 72
 000                       CONSTANT character_s, 73
 000                       CONSTANT character_t, 74
 000                       CONSTANT character_u, 75
 000                       CONSTANT character_v, 76
 000                       CONSTANT character_w, 77
 000                       CONSTANT character_x, 78
 000                       CONSTANT character_y, 79
 000                       CONSTANT character_z, 7A
 000                       CONSTANT character_A, 41
 000                       CONSTANT character_B, 42
 000                       CONSTANT character_C, 43
 000                       CONSTANT character_D, 44
 000                       CONSTANT character_E, 45
 000                       CONSTANT character_F, 46
 000                       CONSTANT character_G, 47
 000                       CONSTANT character_H, 48
 000                       CONSTANT character_I, 49
 000                       CONSTANT character_J, 4A
 000                       CONSTANT character_K, 4B
 000                       CONSTANT character_L, 4C
 000                       CONSTANT character_M, 4D
 000                       CONSTANT character_N, 4E
 000                       CONSTANT character_O, 4F
 000                       CONSTANT character_P, 50
 000                       CONSTANT character_Q, 51
 000                       CONSTANT character_R, 52
 000                       CONSTANT character_S, 53
 000                       CONSTANT character_T, 54
 000                       CONSTANT character_U, 55
 000                       CONSTANT character_V, 56
 000                       CONSTANT character_W, 57
 000                       CONSTANT character_X, 58
 000                       CONSTANT character_Y, 59
 000                       CONSTANT character_Z, 5A
 000                       CONSTANT character_0, 30
 000                       CONSTANT character_1, 31
 000                       CONSTANT character_2, 32
 000                       CONSTANT character_3, 33
 000                       CONSTANT character_4, 34
 000                       CONSTANT character_5, 35
 000                       CONSTANT character_6, 36
 000                       CONSTANT character_7, 37
 000                       CONSTANT character_8, 38
 000                       CONSTANT character_9, 39
 000                       CONSTANT character_colon, 3A
 000                       CONSTANT character_stop, 2E
 000                       CONSTANT character_semi_colon, 3B
 000                       CONSTANT character_minus, 2D
 000                       CONSTANT character_divide, 2F       ;'/'
 000                       CONSTANT character_plus, 2B
 000                       CONSTANT character_comma, 2C
 000                       CONSTANT character_less_than, 3C
 000                       CONSTANT character_greater_than, 3E
 000                       CONSTANT character_equals, 3D
 000                       CONSTANT character_space, 20
 000                       CONSTANT character_CR, 0D           ;carriage return
 000                       CONSTANT character_question, 3F     ;'?'
 000                       CONSTANT character_dollar, 24
 000                       CONSTANT character_exclaim, 21      ;'!'
 000                       CONSTANT character_BS, 08           ;Back Space command character
 000                       CONSTANT direction, 05
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Initialise the system
 000                       ;**************************************************************************************
 000                       ;
 000  00000    cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
 001                       ;direction register
 001  2E004                STORE s0, Count[04]
 002  2E005                STORE s0, left_sum[05]
 003  2E006                STORE s0, right_sum[06]
 004  2C080                OUTPUT s0, LED_port[80]
 005  2C020                OUTPUT s0, LED0[20]
 006  3C001                ENABLE INTERRUPT                    ;enable one second heart beat
 007                       ;**************************************************************************************
 007                       ; Main program
 007                       ;**************************************************************************************
 007                       ;
 007                       ; Display welcome message for design
 007                       ;
 007  00401  main_program: LOAD s4, 01                         ;
 008  2C420                OUTPUT s4, LED0[20]
 009  30026                CALL delay_1s[026]
 00A  00400                LOAD s4, 00
 00B  2C420                OUTPUT s4, LED0[20]
 00C  30026                CALL delay_1s[026]
 00D  34007                JUMP main_program[007]
 00E                       ;**************************************************************************************
 00E                       ; Software delay routines
 00E                       ;**************************************************************************************
 00E                       ;
 00E                       ; Delay of 1us.
 00E                       ;
 00E                       ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00E                       ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00E                       ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00E                       ; in the initiating code. Interrupts may effect software derived delays.
 00E                       ;
 00E                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00E                       ;
 00E                       ; Registers used s0
 00E                       ;
 00E  0000B     delay_1us: LOAD s0, delay_1us_constant[0B]
 00F  1C001      wait_1us: SUB s0, 01
 010  3540F                JUMP NZ, wait_1us[00F]
 011  2A000                RETURN
 012                       ;
 012                       ; Delay of 40us.
 012                       ;
 012                       ; Registers used s0, s1
 012                       ;
 012  00128    delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 013  3000E     wait_40us: CALL delay_1us[00E]
 014  1C101                SUB s1, 01
 015  35413                JUMP NZ, wait_40us[013]
 016  2A000                RETURN
 017                       ;
 017                       ;
 017                       ; Delay of 1ms.
 017                       ;
 017                       ; Registers used s0, s1, s2
 017                       ;
 017  00219     delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 018  30012      wait_1ms: CALL delay_40us[012]
 019  1C201                SUB s2, 01
 01A  35418                JUMP NZ, wait_1ms[018]
 01B  2A000                RETURN
 01C                       ;
 01C                       ; Delay of 20ms.
 01C                       ;
 01C                       ; Delay of 20ms used during initialisation.
 01C                       ;
 01C                       ; Registers used s0, s1, s2, s3
 01C                       ;
 01C  00314    delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 01D  30017     wait_20ms: CALL delay_1ms[017]
 01E  1C301                SUB s3, 01
 01F  3541D                JUMP NZ, wait_20ms[01D]
 020  2A000                RETURN
 021  00364   delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 022  30017    wait_100ms: CALL delay_1ms[017]
 023  1C301                SUB s3, 01
 024  35422                JUMP NZ, wait_100ms[022]
 025  2A000                RETURN
 026                       ;
 026                       ; Delay of approximately 1 second.
 026                       ;
 026                       ; Registers used s0, s1, s2, s3, s4
 026                       ;
 026  00432      delay_1s: LOAD s4, 32                         ;50 x 20ms = 200ms
 027  3001C       wait_1s: CALL delay_20ms[01C]
 028  1C401                SUB s4, 01
 029  35427                JUMP NZ, wait_1s[027]
 02A  2A000                RETURN
 02B                       ;
 02B                       ;
 02B                       ;
 02B                       ;**************************************************************************************
 02B                       ; Interrupt Service Routine (ISR)
 02B                       ;**************************************************************************************
 02B                       ;
 02B                       ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 02B                       ; on the 8 LEDs.
 02B                       ;
 02B  2E000           ISR: STORE s0, ISR_preserve_s0[00]       ;preserve register
 02C  2E101                STORE s1, ISR_preserve_s1[01]
 02D  2E202                STORE s2, ISR_preserve_s2[02]
 02E  2E303                STORE s3, ISR_preserve_s3[03]
 02F  04000                INPUT s0, DATA_IN_PORT[00]          ;get the input, and values of count, left and right sum
 030  06104                FETCH s1, Count[04]
 031  06205                FETCH s2, left_sum[05]
 032  06306                FETCH s3, right_sum[06]
 033  14080                COMPARE s0, 80
 034  35837                JUMP C, ADD_SUM[037]
 035  0E0FF                XOR s0, FF                          ; NOT operation
 036  18001                ADD s0, 01                          ; add 1 for 2s compliment
 037  18101       ADD_SUM: ADD s1, 01
 038  19300                ADD s3, s0
 039  1A200                ADDCY s2, 00
 03A  14100                COMPARE s1, 00                      ;check if s1 incremented from 255 to 0
 03B  35461                JUMP NZ, STORE_VALUES[061]          ;if not, store the values
 03C  14280    COMPARE_80: COMPARE s2, 80
 03D  35840                JUMP C, COMPARE_40[040]             ;compare with 40H if less than
 03E  002FF                LOAD s2, FF                         ; ff == 11111111
 03F  3405D                JUMP LED_OUT[05D]
 040  14240    COMPARE_40: COMPARE s2, 40
 041  35844                JUMP C, COMPARE_20[044]             ; compare with 20 if less than
 042  002FE                LOAD s2, FE                         ; fe == 11111110
 043  3405D                JUMP LED_OUT[05D]
 044  14220    COMPARE_20: COMPARE s2, 20
 045  35848                JUMP C, COMPARE_10[048]
 046  002FC                LOAD s2, FC                         ; fc == 11111100
 047  3405D                JUMP LED_OUT[05D]
 048  14210    COMPARE_10: COMPARE s2, 10
 049  3584C                JUMP C, COMPARE_08[04C]
 04A  002F8                LOAD s2, F8                         ; f8 == 11111000
 04B  3405D                JUMP LED_OUT[05D]
 04C  14208    COMPARE_08: COMPARE s2, 08
 04D  35850                JUMP C, COMPARE_04[050]
 04E  002F0                LOAD s2, F0                         ; f0 == 11110000
 04F  3405D                JUMP LED_OUT[05D]
 050  14204    COMPARE_04: COMPARE s2, 04
 051  35854                JUMP C, COMPARE_02[054]
 052  002E0                LOAD s2, E0                         ; e0 == 11100000
 053  3405D                JUMP LED_OUT[05D]
 054  14202    COMPARE_02: COMPARE s2, 02
 055  35858                JUMP C, COMPARE_01[058]
 056  002C0                LOAD s2, C0                         ; c0 == 11000000
 057  3405D                JUMP LED_OUT[05D]
 058  14201    COMPARE_01: COMPARE s2, 01
 059  3585C                JUMP C, LOAD_00[05C]
 05A  00280                LOAD s2, 80                         ; 80 == 10000000
 05B  3405D                JUMP LED_OUT[05D]
 05C  00200       LOAD_00: LOAD s2, 00                         ; 00 == 00000000
 05D  2C280       LED_OUT: OUTPUT s2, LED_port[80]
 05E  00100                LOAD s1, 00                         ;counter and sum reset
 05F  00200                LOAD s2, 00
 060  00300                LOAD s3, 00
 061  2E104  STORE_VALUES: STORE s1, Count[04]
 062  2E205                STORE s2, left_sum[05]
 063  2E306                STORE s3, right_sum[06]
 064  06000                FETCH s0, ISR_preserve_s0[00]       ;restore register
 065  06101                FETCH s1, ISR_preserve_s1[01]
 066  06202                FETCH s2, ISR_preserve_s2[02]
 067  06303                FETCH s3, ISR_preserve_s3[03]
 068  38001                RETURNI ENABLE
 069                       ;
 069                       ;
 069                       ;**************************************************************************************
 069                       ; Interrupt Vector
 069                       ;**************************************************************************************
 069                       ;
 3FF                       ADDRESS 3FF
 3FF  3402B                JUMP ISR[02B]
 3FF                       ;
 3FF                       ;
